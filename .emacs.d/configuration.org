#+TITLE: Emacs configuration file
#+AUTHOR: Joakim Lindeng Engeset
#+EMAIL: joakim.engeset@gmail.com
#+OPTIONS: toc:nil num:nil

* Settings
** UI

   #+begin_src emacs-lisp
     (tool-bar-mode 0)
     (menu-bar-mode 0)
     (scroll-bar-mode -1)
     (add-to-list 'default-frame-alist '(fullscreen . maximized))
     (setq inhibit-startup-message t)
     (setq epa-pinentry-mode 'loopback)
     (setq-default dired-listing-switches "-alh")
     (set-frame-font "Iosevka Custom 15" nil t)
     (set-frame-parameter (selected-frame) 'alpha 96)
   #+END_SRC
** Insane defaults

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
     (setq gc-cons-threshold 20000000)

     (setq mac-option-modifier nil)
     (setq mac-command-modifier 'meta)
     (setq default-directory "~/")
     (setq require-final-newline t)
     (setq-default tab-width 2)
     (setq backup-directory-alist
           `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
           `((".*" ,temporary-file-directory t)))
     (save-place-mode t)
     (global-set-key (kbd "C-w") 'backward-kill-word)
     (setq user-full-name "Joakim Lindeng Engeset")
     (setq user-mail-address "joakim.engeset@gmail.com")
     (setq help-window-select t)
     (setq ns-pop-up-frames nil)

   #+END_SRC

** Convenience-functions

   #+BEGIN_SRC emacs-lisp
     (defun reload-configuration ()
       "evalute literal configuration file"
       (interactive)
       (org-babel-load-file "~/.emacs.d/configuration.org"))

     (defun indent-buffer ()
       "removes trailing whitespace, indents buffer and replaces tabs with spaces"
       (interactive)

       (save-excursion
         (delete-trailing-whitespace)
         (indent-region (point-min) (point-max) nil)
         (untabify (point-min) (point-max))))

     (defun describe-at-point ()
       "Show the documentation of the Elisp function and variable near point.

        This checks in turn:
        -- for a function name where point is
        -- for a variable name where point is
        -- for a surrounding function call
        "
       (interactive)
       (let (sym)
         ;; sigh, function-at-point is too clever.  we want only the first half.
         (cond ((setq sym (ignore-errors
                            (with-syntax-table emacs-lisp-mode-syntax-table
                              (save-excursion
                                (or (not (zerop (skip-syntax-backward "_w")))
                                    (eq (char-syntax (char-after (point))) ?w)
                                    (eq (char-syntax (char-after (point))) ?_)
                                    (forward-sexp -1))
                                (skip-chars-forward "`'")
                                (let ((obj (read (current-buffer))))
                                  (and (symbolp obj) (fboundp obj) obj))))))
                (describe-function sym))
               ((setq sym (variable-at-point)) (describe-variable sym)
                )
               ;; now let it operate fully -- i.e. also check the
               ;; surrounding sexp for a function call.
               ((setq sym (function-at-point)) (describe-function sym)))))

     (defun jle/kill-buffer ()
       (interactive)
       (kill-buffer (current-buffer)))

     (defun jle/split-window-below ()
       "Split the window horizontally, then switch to the new pane."
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1))

     (defun jle/split-window-right ()
       "Split the window vertically, then switch to the new pane."
       (interactive)
       (split-window-right)
       (balance-windows)
       (other-window 1))

     (defun jle/list-buffers ()
       "Split the window vertically, then switch to the new pane."
       (interactive)
       (list-buffers)
       (balance-windows)
       (other-window 1))

     (defun jle/open-scratch ()
       (interactive)
       (switch-to-buffer (get-buffer-create "*scratch*")))

     (defun jle/find-file ()
       (interactive)
       (call-interactively
        (if (projectile-project-p)
            #'projectile-find-file
          #'find-file)))

     (defun jle/org-capture-task ()
       (interactive)
       (org-capture nil "t"))

     (defun jle/org-agenda-todolist ()
       (interactive)
       (org-agenda nil "t"))
   #+END_SRC

* Package Management
** Prepare =use-package=-macro responsible for structuring packages

   #+BEGIN_SRC emacs-lisp
     (require 'use-package-ensure)
     (setq use-package-always-ensure t)
   #+END_SRC

   =auto-compile=
   #+BEGIN_SRC emacs-lisp
     (use-package auto-compile
       :config (auto-compile-on-load-mode))
     (setq load-prefer-newer t)
   #+END_SRC

* Packages
** evil-leader

   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
       :config
       (global-evil-leader-mode)
       (evil-leader/set-leader "<SPC>")
       (evil-leader/set-key
         "d" 'jle/kill-buffer
         "D" 'kill-buffer-and-window
         "h" 'jle/split-window-below
         "v" 'jle/split-window-right
         "b" 'jle/list-buffers
         "r" 'reload-configuration
         "w" 'save-buffer
         "g" 'magit-status) ; for buffer cleanup
       )
   #+END_SRC

** evil-magit

   #+BEGIN_SRC emacs-lisp
     (use-package evil-magit)
   #+END_SRC

** evil

   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :config
       (evil-mode 1)

       ;; normal-mode
       (define-key evil-normal-state-map (kbd "C-0") 'indent-buffer)
       (define-key evil-normal-state-map "\C-u" 'evil-scroll-up)
       (define-key evil-normal-state-map "\C-f" 'jle/find-file)
       (define-key evil-normal-state-map "\C-e" 'counsel-cd)
       (define-key evil-normal-state-map "\C-b" 'counsel-buffer-or-recentf)
       (define-key evil-normal-state-map (kbd "C-Ã¥") 'evil-window-prev)
       (define-key evil-normal-state-map (kbd "~") 'evil-window-next)
       (define-key evil-normal-state-map "K" 'describe-at-point)
       (define-key evil-normal-state-map (kbd "<C-S-backspace>") 'jle/open-scratch)
       (define-key evil-normal-state-map (kbd "<S-backspace>") 'jle/org-agenda-todolist)
       (define-key evil-normal-state-map (kbd "<backspace>") 'jle/org-capture-task)

       ;; insert-mode
       (define-key evil-insert-state-map "\M-v" 'evil-paste-after)
       (define-key evil-insert-state-map (kbd "C-0") 'indent-buffer)

       ;; visual-mode
       (define-key evil-visual-state-map "\C-e" 'eval-region))
   #+END_SRC

** evil-surround

   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :config
       (global-evil-surround-mode 1))
   #+END_SRC

** evil-org

   #+BEGIN_SRC emacs-lisp
     (use-package evil-org
       :config
       (add-hook 'org-mode-hook 'evil-org-mode)
       (add-hook 'evil-org-mode-ook
                 (lambda () (evil-org-set-key-theme)))
       (require 'evil-org-agenda)
       (evil-org-agenda-set-keys))
   #+END_SRC

** evil-escape

   #+BEGIN_SRC emacs-lisp
     (use-package evil-escape
       :config
       (evil-escape-mode 1)
       (setq-default evil-escape-delay 0.2))
   #+END_SRC

** flycheck

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :init
       (add-hook 'after-init-hook 'global-flycheck-mode)
       :config
       (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
       (add-hook 'org-mode-hook #'flycheck-mode)

       )

   #+END_SRC

** counsel/ivy

   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :bind
       ("M-x" . 'counsel-M-x)
       ("C-s" . 'swiper)

       :config
       (use-package flx)
       (use-package smex)

       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       (setq ivy-initial-inputs-alist nil)
       (setq ivy-re-builders-alist
             '((swiper . ivy--regex-plus)
               (t . ivy--regex-fuzzy))))
   #+END_SRC

** org-bullets

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :init
       (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC

** org-mode

   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/Dropbox/org")
     (defun org-file-path (filename)
       (concat (file-name-as-directory "~/Dropbox/org") filename))
     (setq org-index-file (org-file-path "refile.org"))
     (setq org-agenda-files (quote ("~/Dropbox/org"
                                    "~/org/client-1"
                                    "~/org/client-2")))

     (setq org-archive-location
           (concat (org-file-path "archive.org") "::* From %s"))
     (defun open-index-file ()
       (interactive)
       (find-file-other-window org-index-file)
       (outline-show-all)
       (flycheck-mode -1)
       (end-of-buffer))

     (setq org-confirm-babel-evaluate nil)
     (setq org-src-tab-acts-natively t)
     (setq org-log-done 'time)
     (setq org-src-fontify-acts-natively t)
     (setq org-todo-keywords
           '((sequence "TODO" "NEXT" "|" "DONE")))

     (add-hook 'org-capture-mode-hook 'evil-insert-state)
     (add-hook 'org-log-buffer-setup-hook 'evil-insert-state)
     (add-hook 'text-mode-hook 'auto-fill-mode)

     (define-key global-map "\C-ca" 'org-agenda)
     (define-key global-map "\C-cc" 'counsel-org-capture)
     (define-key global-map "\C-cl" 'org-store-link)
     (define-key global-map "\C-ci" 'open-index-file)
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (shell . t)))

     (setq org-capture-templates
           '(("t" "Task" entry (file+headline org-index-file "Tasks") "* TODO %?")
             ("r" "Read" entry (file+headline org-index-file "Tasks") "* TODO read %? %c\n")
             ("n" "Note" entry (file+headline org-index-file "Notes") "* %?\nFrom: %a")))

     (setq org-refile-targets (quote ((nil :maxlevel . 2)
                                      (org-agenda-files :maxlevel . 2))))
     (setq org-outline-path-complete-in-steps nil)

   #+END_SRC

** paredit

   #+BEGIN_SRC emacs-lisp
     (use-package paredit)
   #+END_SRC

** rainbow-delimiters

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters)
   #+END_SRC

** company

   #+BEGIN_SRC emacs-lisp
     (use-package company)
     (add-hook 'after-init-hook 'global-company-mode)
     (global-set-key (kbd "M--") 'company-complete-common)
   #+END_SRC

** which-key

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config
       (setq which-key-idle-delay 0.4)
       (which-key-mode))
   #+END_SRC

** yasnippet

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init
       (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
       (yas-global-mode 1)
       :config
       )

   #+END_SRC

** ag

   #+BEGIN_SRC emacs-lisp
     (use-package ag
       :config
       (global-set-key (kbd "C-c f") 'counsel-ag)
       )
   #+END_SRC

** magit

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind
       ("C-x g" . magit-status)

       :config
       (use-package evil-magit)
       (use-package with-editor)
       (setq magit-push-always-verify nil)
       (setq git-commit-summary-max-length 50)

       (setq magit-branch-arguments nil
             ;; don't put "origin-" in front of new branch names by default
             magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
             magit-push-always-verify nil
             ;; Get rid of the previous advice to go into fullscreen
             magit-restore-window-configuration t)

       (setq magit-pull-or-fetch t)
       (define-key magit-mode-map "f" 'magit-pull) ; was magit-fetch
       (define-key magit-mode-map "F" nil)         ; was magit-pull
       (with-eval-after-load 'magit-mode
         (define-key magit-mode-map (kbd "<Backspace>") nil))

       (add-hook 'with-editor-mode-hook 'evil-insert-state))
   #+END_SRC

** forge
   #+BEGIN_SRC emacs-lisp
     (use-package forge
       :after magit)
   #+END_SRC
** exec-path-from-shell
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :config
       (exec-path-from-shell-initialize))
   #+END_SRC

** projectile

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :bind
       ("C-c v" . 'projectile-ag)

       :config
       (projectile-global-mode)

       (define-key evil-normal-state-map (kbd "C-p") 'projectile-switch-project)
       (evil-define-key 'motion ag-mode-map (kbd "C-p") 'projectile-switch-project)
       (evil-define-key 'motion rspec-mode-map (kbd "C-p") 'projectile-switch-project)

       (setq projectile-completion-system 'ivy)
       (setq projectile-switch-project-action 'projectile-dired)
       (setq projectile-require-project-root nil)
       )
   #+END_SRC

** markdown-mode

   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC

** minions
   #+BEGIN_SRC emacs-lisp
     (use-package minions
       :config
       (setq minions-mode-line-lighter ""
             minions-mode-line-delimiters '("" . ""))
       (minions-mode 1))
   #+END_SRC
** doom-themes
   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :config
       (setq doom-themes-enable-bold t)   ; if nil, bold is universally disabled
       (setq doom-themes-enable-italic t) ; if nil, italics is universally disabled
       (load-theme 'doom-molokai t)
       (doom-themes-org-config)
       (doom-themes-visual-bell-config) ; Enable flashing mode-line on errors
       )

   #+END_SRC
* Languages
** Lisp

   #+BEGIN_SRC emacs-lisp
     (setq lispy-mode-hooks
           '(clojure-mode-hook
             emacs-lisp-mode-hook
             lisp-mode-hook
             scheme-mode-hook))

     (dolist (hook lispy-mode-hooks)
       (add-hook hook (lambda ()
                        (setq show-paren-style 'expression)
                        (paredit-mode)
                        (rainbow-delimiters-mode))))
   #+END_SRC
